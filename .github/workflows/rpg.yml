name: RPG

on:
  push:
    branches: [ "dev" ]
    
permissions:
  contents: write
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  failure-recovery:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ failure() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Git user name and email
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Handle failure
        run: |
          echo "Handling failure..."
          git fetch origin dev
          git checkout dev
          FAILURE_BRANCH="failures/$(date +%s)"
          echo "Creating branch: $FAILURE_BRANCH"
          git checkout -b $FAILURE_BRANCH
          git push origin $FAILURE_BRANCH || echo "Failed to push branch"
          git checkout dev
          git reset --hard HEAD~1
          git push origin dev --force || echo "Failed to force push to dev"

  merge-to-main:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Récupère tout l'historique pour les merges

      - name: Set Git user name and email
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Show branch status
        run: |
          git status
          git log --oneline --graph --decorate -n 10

      - name: Check for changes to merge
        run: |
          git checkout main
          git pull origin main
          if git merge-base --is-ancestor main dev; then
            echo "No changes to merge"
            exit 0
          fi

      - name: Merge dev into main
        run: |
          git checkout main
          git merge dev --no-ff -m "Merge dev into main"
        continue-on-error: true

      - name: Check merge status
        run: |
          if [[ -n $(git status -s) ]]; then
            echo "Merge conflict detected. Manual intervention required."
            git status
            exit 1
          fi

      - name: Push changes
        run: git push origin main

      - name: Cleanup
        if: always()
        run: |
          git checkout dev
          git branch -D temp-merge || true
